//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

	public class ModTerrainManager : FortressCraftMod
	{
		public ModTerrainManager ()
		{
		}

		public static uint GetCube(long x,long y,long z)
		{
			Segment s = WorldScript.instance.GetSegment (x ,y, z);
			return s.GetCube 					(x, y, z);
		}
		public static CubeData GetCubeData(long x,long y,long z)
		{
			Segment s = WorldScript.instance.GetSegment (x ,y, z);
			return s.GetCubeData					(x, y, z);
		}
		public static bool AddNewTerrain(TerrainDataEntry newEntry)
		{
			TerrainDataEntry[] tempEntries = (TerrainDataEntry[])TerrainData.mEntries.Clone();
			if(TerrainData.mEntries[(int)newEntry.CubeType] == null)
			{
				global::TerrainData.mEntries[(int)newEntry.CubeType] = newEntry;
				ReloadTexures ();
				return true;
			}
			Debug.Log("[MOD]Terrain already exists? (By:Pencol)");
			return false;
		}
		public static void AddGenericMachineTerrain(TerrainDataValueEntry newValueEntry)
		{
			TerrainData.mEntries[596].Values.Add(newValueEntry);
	
		}
	
		private static bool IsTypeConsideredPassableOld(int lType)
		{
			return lType == 1 || lType == 62 || lType == 63 || lType == 20 || lType == 39 || lType == 76 || lType == 72 || lType == 78 || lType == 73 || lType == 74 || lType == 75 || lType == 77 || lType == 9 || lType == 61 || (!global::CubeHelper.IsCustomOld(lType) && global::TerrainData.isPassable(lType));
		}
		private static bool IsTypeConsideredFluidGen(int lType)
		{
			return lType == 169 || lType == 168;
		}

	public static string GetKeyfromCube(uint cube)
	{
		foreach (ModCubeMap cubeMap in ModManager.mModMappings.CubeTypes)
		{
			if (cubeMap.CubeType == cube) 
			{
				return cubeMap.Key;
			}
		}
		return null;
	}

	public static ushort GetCubeFromKey(string key)
	{
		foreach (ModCubeMap cubeMap in ModManager.mModMappings.CubeTypes)
		{
			if (cubeMap.Key == key) 
			{
				return cubeMap.CubeType;
			}
		}
		return 0;
	}

	public static void ReloadTexures()
	{

			global::CubeHelper.mabIsCubeTypeTransparent = new bool[65535];
			global::CubeHelper.mabIsCubeTypeSolid = new bool[65535];
			global::CubeHelper.mabIsCubeTypeGlass = new bool[65535];
			global::CubeHelper.mabIsCubeTypeHollow = new bool[65535];
			global::CubeHelper.mabIsCubeTypeCustom = new bool[65535];
			global::CubeHelper.mabIsCubeTypeColorised = new bool[65535];
			global::CubeHelper.mabIsCubeTypePaintable = new bool[65535];
			global::CubeHelper.mabIsCubePassable = new bool[65535];
			global::CubeHelper.mabIsCubeTypePhysicsFluid = new bool[65535];
			global::CubeHelper.mabHasEntity = new bool[65535];
			global::CubeHelper.mabHasObject = new bool[65535];
			global::CubeHelper.mabHasStages = new bool[65535];
			global::CubeHelper.maCategory = new global::MaterialCategories[65535];
			for (int i = 0; i < 65535; i++)
			{
				global::CubeHelper.mabIsCubeTypeCustom[i] = global::CubeHelper.IsCustomOld(i);
				global::CubeHelper.mabIsCubeTypeTransparent[i] = global::CubeHelper.IsCubeTransparentOld(i);
				global::CubeHelper.mabIsCubeTypeSolid[i] = global::CubeHelper.IsCubeSolidOld(i);
				global::CubeHelper.mabIsCubeTypeGlass[i] = global::CubeHelper.IsCubeGlassOld(i);
				global::CubeHelper.mabIsCubeTypeHollow[i] = global::CubeHelper.IsCubeHollowOld(i);
				global::CubeHelper.mabIsCubeTypeColorised[i] = global::CubeHelper.IsColorisedOld(i);
				global::CubeHelper.mabIsCubeTypePaintable[i] = global::CubeHelper.IsPaintableOld(i);
				global::CubeHelper.mabIsCubePassable[i] = IsTypeConsideredPassableOld(i);
				global::CubeHelper.mabIsCubeTypePhysicsFluid[i] = IsTypeConsideredFluidGen(i);
				global::CubeHelper.mabHasEntity[i] = global::CubeHelper.HasEntityOld(i);
				global::CubeHelper.mabHasObject[i] = global::CubeHelper.HasObjectOld(i);
				global::CubeHelper.mabHasStages[i] = global::CubeHelper.HasStagesOld(i);
				global::CubeHelper.maCategory[i] = global::TerrainData.GetMaterialCategory((ushort)i);
			}


		}
	}


